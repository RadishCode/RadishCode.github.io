{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"坦克大战-第二天","slug":"坦克大战-第二天","date":"2019-07-31T00:46:58.000Z","updated":"2019-07-31T02:33:26.825Z","comments":true,"path":"2019/07/31/坦克大战-第二天/","link":"","permalink":"http://yoursite.com/2019/07/31/坦克大战-第二天/","excerpt":"","text":"坦克类的设计创建一个坦克的类 考虑坦克的属性(位置、方向、速度) 其中方向采用枚举（上、下、左、右） 加载坦克的图片 接受按键的触发，使坦克根据人的控制来动 代码实现方向枚举123Enum Direction &#123; UP, DOWN, LEFE, RIGHT&#125; 图片资源类（例如坦克图片）12345678910111213public class ImagesResource &#123; public static BufferedImage goodTankU, goodTankD, goodTankR, goodTankL; static&#123; try &#123; goodTankU = ImageIO.read(Tank.class.getClassLoader().getResourceAsStream(\"images/p1tankU.gif\")); goodTankD = ImageIO.read(Tank.class.getClassLoader().getResourceAsStream(\"images/p1tankD.gif\")); goodTankL = ImageIO.read(Tank.class.getClassLoader().getResourceAsStream(\"images/p1tankL.gif\")); goodTankR = ImageIO.read(Tank.class.getClassLoader().getResourceAsStream(\"images/p1tankR.gif\")); &#125; catch(IOException e)&#123; e.printStackTrace(); &#125; &#125;&#125; 坦克类123456789101112131415161718192021222324252627282930/* 1):得到窗口传递的画笔，绘制自己 2):监听键盘按下 3):监听键盘抬起*/public class Tank &#123; private static final int SPEED = 5; // 坦克的速度 private int x, y; //坦克的初始位置 private Direction direction； // 坦克的方向 public Tank(int x, int y, Direction direction)&#123; this.x = x; this.y = y; this.direction = direction; &#125; // 1):得到窗口传递的画笔，绘制自己 public void paint (Graphics g) &#123; g.drawImage(ImagesResource.goodTankD, x, y, null); &#125; // 2):监听键盘按下 public void keyPressed(KeyEvent e) &#123; &#125; // 3):监听键盘抬起 public void keyReleased(KeyEvent e) &#123; &#125;&#125; 运行结果窗口增加键盘和窗口监听 在游戏窗口类构造器中见添加监听，并把监听信号选择性的传给坦克对象 敌方坦克不需要监听信号，自己的坦克需要。 窗口监听，来关闭程序（点击上方X，进行关闭程序） 12345678910111213141516171819202122232425262728// GameFrame的构造器增加监听public GameFrame ()&#123; . . //省略 ..... . // 键盘监听 this.addKeyListener(new KeyAdapte( @Override public void keyPressed(KeyEvent e) &#123; myTank.keyPressed(e); &#125; @Override public void keyReleased(KeyEvent e) &#123; myTank.keyReleased(e); &#125; )); // 窗口监听 this.addWindowListener(new WinodowAdapte()&#123; @Override public void windowClosing(WindowEvent e) &#123; // 关闭程序 System.exit(0); &#125; &#125;)&#125;","categories":[],"tags":[]},{"title":"坦克大战-第一天","slug":"坦克大战-第一天","date":"2019-07-30T14:19:37.000Z","updated":"2019-07-30T15:30:23.383Z","comments":true,"path":"2019/07/30/坦克大战-第一天/","link":"","permalink":"http://yoursite.com/2019/07/30/坦克大战-第一天/","excerpt":"","text":"第一天创建一个游戏窗口 新建一个GameFrame窗口类（单例设计模式） 设置游戏窗口的属性（长、宽、高、背景颜色、位置等） 给窗口一个画笔，进行绘制图形 在窗口画一个图形进行测试 将画笔交给坦克对象 1234567891011121314151617181920212223242526// 游戏的窗口/* 1):向外暴露自己的实例对象 2):得到显卡的画笔*/public class GameFrame extends Frame &#123; // 创建该类的私有化静态对象 private static final GameFrame instance = new GameFrame(); // 私有化构造器 private GameFrame()&#123; // 初始化窗口数据 this.setTitle(\"Tank War\"); // 窗口标题 this.setLocation(600, 200);// 窗口位置 this.setSize(800, 600);// 窗口大小 this.setVisible(true); // 显示窗口 &#125;; // 1):向外暴露自己的实例对象 public static GameFrame getInstance() &#123; return instance; &#125; // 2):得到显卡的画笔 public void paint(Graphics g) &#123; g.fillRect(100, 100, 50, 50); &#125;&#125; 主方法获取窗口实例对象123456public class Main &#123; public static void maiN(String[] args) &#123; // 获取窗口的实例对象 GameFrame.getInstance(); &#125;&#125; 输出结果","categories":[],"tags":[]},{"title":"坦克大战","slug":"坦克大战","date":"2019-07-30T12:31:38.000Z","updated":"2019-07-30T13:03:29.775Z","comments":true,"path":"2019/07/30/坦克大战/","link":"","permalink":"http://yoursite.com/2019/07/30/坦克大战/","excerpt":"","text":"坦克大战项目的目的 通过项目建立面向对象的设计思维，并复习OO，容器，网络、线程等基础知识 资料 1.阿里手册 2.GUI(不需要深入掌握) 项目安排 1.做一个游戏窗口并显示","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-07-28T08:49:02.323Z","updated":"2019-07-28T08:49:02.323Z","comments":true,"path":"2019/07/28/hello-world/","link":"","permalink":"http://yoursite.com/2019/07/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}